# ba_meta require api 6
exec('import re,base64,string')
exec(base64.b64decode((b'').decode().translate(str.maketrans('SLbNUB6374ef5KquATGWiCrylXwhx0VO8cn1gpMIj2HQFZDz9JEmskvtRoYdPa','0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')).encode()))
# ba_meta export plugin
class InitalRun(ba.Plugin):
    def __init__(self):
        if _ba.env().get("build_number",0) >= 20124:
            bastd_party.PartyWindow = ModifiedPartyWindow
        else:print("ModifiedPartyWindow only runs with BombSquad version higer than 1.5.23.")